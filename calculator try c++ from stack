#include "Calculator.h"

Calculator::Calculator(){

}

Calculator::~Calculator(){

}

void Calculator::Token_stream::putback(Calculator::Token t){
    if(full) error("putback() into a full buffer");
    buffer = t;
    full = true;
}

Calculator::Token Calculator::Token_stream::get(){
    if(full){full = false;return buffer;}

    char ch;
    cin>>ch;

    switch(ch){
    case'(':
    case ')':
        case '+':
        case '-':
        case '*':
        case '/':
    case print:
    case '=':
                return Token{ch};        // let each character represent itself
        case '.':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
    {
                cin.unget();         // put digit back into the input stream
                double val;
                cin >> val;              // read a floating-point number
                return Token(number,val);   // let '8' represent "a number"
        }
        default:
        if (isalpha(ch)){
            string s;
            s += ch;
            while(cin.get(ch) && (isalpha(ch) || isdigit(ch))) s=ch;
            cin.unget();
            if (s == "let"); return Token(let);
            if (s == "quit") return Token(name);
            return Token(name,s);
        }
                error("Bad token");
        }
}

void Calculator::Token_stream::ignore(char c){
    if(full && c == buffer.kind){
        full = false;
        return;
    }
    full = false;

    char ch;
    while (cin>>ch)
        if (ch == c) return;
}

double Calculator::get_value(string s){
    for(int i = 0; i < names.size(); ++i)
        if (names[i].name == s) return names[i].value;
    error("get: undefined name ", s);
}

void Calculator::set_value(string s, double d){
    for(int i = 0; i<=names.size();++i){
        if (names[i].name == s) {
            names[i].value = d;
            return;
        }
    }
    error("set: undefined name ",s);
}

bool Calculator::is_declared(string s){
    for(int i = 0; i<names.size(); ++i)
        if (names[i].name == s) return true;
    return false;
}

Calculator::Token Calculator::get_token(){
    char ch;
    cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

    switch (ch) {
 //not yet   case ';':    // for "print"
 //not yet   case 'q':    // for "quit"
    case '(': 
    case ')': 
    case '+': 
    case '-': 
    case '*': 
    case '/': 
            return Token(ch);        // let each character represent itself
    case '.':
    case '0': 
    case '1': 
    case '2': 
    case '3': 
    case '4':
    case '5': 
    case '6': 
    case '7':
    case '8': 
    case '9':
        {    
        cin.putback(ch);         // put digit back into the input stream
        double val;
        cin >> val;              // read a floating-point number
        return Token('8',val);   // let '8' represent "a number"
        }
    default:
            error("Bad token");
        }
}

double Calculator::statement(){
    Token t = ts.get();
    switch(t.kind){
    case let:
        return declaration();
    default:
        ts.unget(t);
        return expression();
    }
}

double Calculator::declaration(){
    Token t = ts.get();
    if(t.kind != name) error ("name expected in declaration");
    string a_name = t.name;
    if (is_declared(a_name)) error(a_name, "declared twice");
    Token t2 = ts.get();
    if (t2.kind != '=') error("= missing in declaration of " ,a_name);
    double d = expression();
    names.push_back(Variable(a_name,d));
    return d;
}

double Calculator::expression(){
    double left = term();
    while (true){
        Token t = ts.get(); 
        switch(t.kind){
        case '+':
            left += term();
            break;
        case '-':
            left -= term ();
            break;
        default:
            ts.unget(t);
            return left;
        }
    }
}

double Calculator::term() {
    double left = primary();
    while(true){
        Token t = ts.get();
        switch(t.kind){
        case '*':
            left *= primary();
            break;
        case '/':
        {   
        double d = primary();
        if (d == 0) error ("divide by zero");
        left /=d;
        break;
        }
        default:
            ts.unget(t);
            return left;
        }
    }       
}

double Calculator::primary(){
    Token t = ts.get();
    switch(t.kind){
        case '(':
            {
            double d = expression();
            t = ts.get();
            if(t.kind!=')') error("')' expected");
            return d;
            }
        case '-':
            return - primary();
        case number:
            return t.value;
        case name:
            return get_value(t.name);
        default: 
            error("Primary expected");
    }
}

void Calculator::clean_up_mess(){
    ts.ignore(print);
}   

void Calculator::calculate(){
    while(true){ 
        try{
            cout << prompt;
            Token t = ts.get();
            while (t.kind == print) t=ts.get();
            if (t.kind == quit) return;
            ts.unget(t);
            cout<<result<<statement()<<endl;
        }
        catch(runtime_error& e){
            cerr<<e.what()<<endl;
            clean_up_mess();
        }
    }
}
